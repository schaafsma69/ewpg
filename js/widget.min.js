if("undefined"==typeof config){var config={};"undefined"!=typeof angular&&angular.module("risevision.common.i18n.config",[]).constant("LOCALES_PREFIX","locales/translation_").constant("LOCALES_SUFIX",".json")}var RiseVision=RiseVision||{};RiseVision.WebPage={},RiseVision.WebPage=function(e,t){"use strict";function n(){var t,n,a,o=e.getElementById("webpage-container"),r=e.getElementById("webpage-frame"),i=d.getInt("rsH")/d.getInt("rsW")*100,s=m.scrollHorizontal>0?m.scrollHorizontal:0,l=m.scrollVertical>0?m.scrollVertical:0,c=parseFloat(m.zoom);o&&r&&(t=o.getElementsByClassName("blocker")[0],o.style.visibility="hidden",0!==l&&(i+=l/d.getInt("rsW")*100),o.setAttribute("style","padding-bottom:"+i+"%"),t.style.display=m.interactive?"none":"block",r.setAttribute("scrolling",m.scrollbars?"yes":"no"),n="-ms-zoom:"+c+";-moz-transform: scale("+c+");-moz-transform-origin: 0 0;-o-transform: scale("+c+");-o-transform-origin: 0 0;-webkit-transform: scale("+c+");-webkit-transform-origin: 0 0;",n+="width: "+1/c*100+"%;height: "+1/c*100+"%;",r.setAttribute("style",n),(0!==s||0!==l)&&(a="margin: -"+l+"px 0 0 -"+s+"px;",r.setAttribute("style",n+a)))}function a(){var t=e.getElementById("webpage-frame"),n=e.getElementById("webpage-container"),o=/[?#&]/.test(f),r=Math.ceil(100*Math.random()),i=o?f+"&dummyVar="+r:f+"?dummyVar="+r;n&&t&&(t.onload=function(){t.onload=null,n.style.visibility="visible",m.refresh>0&&null===b&&(b=setInterval(function(){a()},m.refresh))},t.setAttribute("src",i))}function o(){jQuery("#webpage-frame").css({top:0,left:0});var e=m.scrollHorizontalEnd>0?m.scrollHorizontalEnd:0,t=m.scrollVerticalEnd>0?m.scrollVerticalEnd:0,n=m.scrollDuration>0?m.scrollDuration:0,a=m.scrollTimeoutStart>0?m.scrollTimeoutStart:0;m.animated&&(e>0||t>0)&&(e="-="+e,t="-="+t,a>0?jQuery("#webpage-frame").delay(a).animate({top:t,left:e},n):jQuery("#webpage-frame").animate({top:t,left:e},n))}function r(){var t=e.getElementById("webpage-frame");m.refresh>0&&clearInterval(b),t&&(t.src="about:blank")}function i(){t.rpc.call("","rsevent_ready",null,d.getString("id"),!0,!0,!0,!0,!1)}function s(){f=m.url,-1===f.indexOf("://")&&(f="http://"+f),n(),i()}function l(){r()}function c(){a(),o()}function u(){r()}function g(e){d=new t.Prefs,m=e,p=new RiseVision.Common.Background(m),p.init(s)}var d=null,m={},f="",b=null,p=null;return{setAdditionalParams:g,pause:l,play:c,stop:u}}(document,gadgets);var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Background=function(e){"use strict";function t(){setTimeout(function(){s.style.backgroundImage="url("+e.background.image.url+g+"cb="+(new Date).getTime()+")",t()},c)}function n(){i=!0,e.background.useImage&&!u&&t(),r&&"function"==typeof r&&r()}function a(){var t;s=document.getElementById("background"),l=document.getElementById("backgroundStorage"),document.body.style.background=e.background.color,s?e.background.useImage?(s.className=e.background.image.position,s.className=e.background.image.scale?s.className+" scale-to-fit":s.className,u=0!==Object.keys(e.backgroundStorage).length,u?l?(l.addEventListener("rise-storage-response",function(e){e.detail&&e.detail.files&&e.detail.files.length>0&&(s.style.backgroundImage="url("+e.detail.files[0].url+")"),i||n()}),l.setAttribute("folder",e.backgroundStorage.folder),l.setAttribute("fileName",e.backgroundStorage.fileName),l.setAttribute("companyId",e.backgroundStorage.companyId),l.go()):console.log("Missing element with id value of 'backgroundStorage'"):(t=e.background.image.url.split("?"),g=1===t.length?"?":"&",s.style.backgroundImage="url("+e.background.image.url+")",n())):n():console.log("Missing element with id value of 'background'")}function o(e){i?e&&"function"==typeof e&&e():(e&&(r=e),a())}var r=null,i=!1,s=null,l=null,c=9e5,u=!1,g="";return{init:o}},function(e,t){"use strict";function n(){RiseVision.WebPage.play()}function a(){RiseVision.WebPage.pause()}function o(){RiseVision.WebPage.stop()}function r(e,t){Array.isArray(e)&&e.length>0&&"additionalParams"===e[0]&&Array.isArray(t)&&t.length>0&&RiseVision.WebPage.setAdditionalParams(JSON.parse(t[0]))}var i=new t.Prefs,s=i.getString("id");e.oncontextmenu=function(){return!1},e.addEventListener("polymer-ready",function(){s&&""!==s&&(t.rpc.register("rscmd_play_"+s,n),t.rpc.register("rscmd_pause_"+s,a),t.rpc.register("rscmd_stop_"+s,o),t.rpc.register("rsparam_set_"+s,r),t.rpc.call("","rsparam_get",null,s,["additionalParams"]))})}(window,gadgets);var _gaq=_gaq||[];_gaq.push(["_setAccount","UA-57092159-6"]),_gaq.push(["_trackPageview"]),function(){var e=document.createElement("script");e.type="text/javascript",e.async=!0,e.src=("https:"==document.location.protocol?"https://ssl":"http://www")+".google-analytics.com/ga.js";var t=document.getElementsByTagName("script")[0];t.parentNode.insertBefore(e,t)}();
//# sourceMappingURL=data:application/json;base64,